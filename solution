/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool transverse(TreeNode* s, TreeNode* t)
    {
        if(s==NULL && t== NULL)
        {
            return true;
        }
        else if(s==NULL || t== NULL)
        {
            return false;
        }
        else
        {
            return (s->val== t->val)&& transverse(s->left, t->left)&& transverse(s->right, t->right);
        }
    }
    void find(TreeNode* s, TreeNode* t, TreeNode* &ans)
    {
        if(s== NULL )
        {
            return ;
        }

       else if(s->val== t->val)
        {
          if(transverse( s, t)==true)
          {ans=s;}
           
           find( s->left, t,ans);
             find( s->right, t,ans);
          
        }
        else
        {
             find( s->left, t,ans);
            find( s->right, t,ans);
        }
    }
    bool isSubtree(TreeNode* s, TreeNode* t) {
        TreeNode*  ans=NULL;
       find( s,  t, ans);
        
        return  transverse( ans, t);
    }
};
